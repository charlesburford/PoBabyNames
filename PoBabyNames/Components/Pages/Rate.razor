   @page "/rate"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using PoBabyNames.Data
@using PoBabyNames.Models
@inject NavigationManager NavigationManager
   @using Radzen
   @inject ApplicationDbContext DbContext
   @using Microsoft.AspNetCore.Authorization
   @inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor

<AuthorizeView>
    <Authorized>
        <div>
            @if (currentName != null)
            {
                <p>Rate the name: @currentName.NameText</p>
                <RadzenSlider @bind-Value="currentRating" Min="0" Max="5" Style="width: 300px;" TickInterval="1" ShowTicks="true" ShowValue="true" />
                <p>Current Rating: @currentRating</p>
                <RadzenButton Text="Submit" Click="@SubmitRating" />
            }
            else
            {
                <div class="alert alert-info">No more names to rate.</div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <h3>User must log in</h3>
    </NotAuthorized>
</AuthorizeView>



@code {
    private int currentRating;
    private Name currentName;
    private int? groupId = 1; // Assume a group ID is set

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);

        if (currentUser == null)
        {
            NavigationManager.NavigateTo("account/login", true);
        }

        await LoadNextName();
    }

    private async Task SubmitRating()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (userId == null)
        {
            throw new InvalidOperationException("User ID is not available.");
        }

        var rating = new Rating
            {
                UserId = userId,
                NameId = currentName.Id,
                GroupId = groupId.Value,
                RatingValue = currentRating
            };

        DbContext.Ratings.Add(rating);
        await DbContext.SaveChangesAsync();

        await LoadNextName();
    }

    private async Task LoadNextName()
    {
        var userId = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        currentName = await DbContext.Names
            .OrderBy(n => n.Id)
            .FirstOrDefaultAsync(n => !DbContext.Ratings.Any(r => r.NameId == n.Id && r.UserId == userId));
    }
}