@page "/"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using PoBabyNames.Data
@using PoBabyNames.Models
@using Microsoft.AspNetCore.Authorization
@inject DataImportService DataImportService
@inject ApplicationDbContext DbContext
@inject IHttpContextAccessor HttpContextAccessor
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Top 10 names decided by group: @groupName</h1>
        <button @onclick="ImportData" disabled="@isImporting">Import Data</button>
        @if (isImporting)
        {
            <p><em>Importing data...</em></p>
        }
        else if (importMessage != null)
        {
            <p>@importMessage</p>
        }

        <RadzenGrid Data="@namesList" TItem="NameViewModel" ColumnWidth="auto" Style="width:100%">
            <Columns>
                <RadzenGridColumn TItem="NameViewModel" Property="NameText" Title="Name" />
                <RadzenGridColumn TItem="NameViewModel" Property="AverageRating" Title="Average Rating" />
            </Columns>
        </RadzenGrid>
    </Authorized>
    <NotAuthorized>
        <h3>User must log in</h3>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool isImporting = false;
    private string importMessage;
    private string groupName;
    private Models.Group? currentGroup;
    private List<NameViewModel> namesList = new List<NameViewModel>();
    private Dictionary<string, string> userRatings = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User.Identity.IsAuthenticated ? await UserManager.GetUserAsync(authState.User) : null;

        if (currentUser == null)
        {
            NavigationManager.NavigateTo("account/login", true);
        }
        else
        {
            currentGroup = await DbContext.Groups.FindAsync(currentUser.GroupId);
            groupName = currentGroup?.GroupName ?? "No group assigned";

            if (currentGroup != null)
            {
                namesList = await LoadNamesAsync();
            }
        }
    }

    private async Task<List<NameViewModel>> LoadNamesAsync()
    {
        var userId = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        var names = await DbContext.Names
            .Where(n => DbContext.Ratings.Any(r => r.NameId == n.Id && r.UserId == userId))
            .ToListAsync();
        var namesList = new List<NameViewModel>();

        foreach (var name in names)
        {
            var ratings = await DbContext.Ratings.Where(r => r.NameId == name.Id && r.GroupId == currentGroup.GroupId).ToListAsync();
            var averageRating = ratings.Any() ? ratings.Average(r => r.RatingValue) : 0.0;

            var userRatings = ratings.ToDictionary(
                r => r.UserId.ToString(),
                r => int.Parse(r.RatingValue.ToString())
            );

            namesList.Add(new NameViewModel
                {
                    NameText = name.NameText,
                    AverageRating = averageRating,
                    UserRatings = userRatings
                });
        }

        return namesList.OrderByDescending(n => n.AverageRating).ToList();
    }

    private async Task ImportData()
    {
        isImporting = true;
        importMessage = null;

        try
        {
            await DataImportService.ImportCsvDataAsync();
            importMessage = "Data imported successfully!";
        }
        catch (Exception ex)
        {
            importMessage = $"An error occurred: {ex.Message}";
        }

        isImporting = false;
    }
}
}
}