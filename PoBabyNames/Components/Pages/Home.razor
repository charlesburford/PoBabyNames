@page "/"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using PoBabyNames.Data
@using PoBabyNames.Models
@using Microsoft.AspNetCore.Authorization
@inject DataImportService DataImportService
@inject ApplicationDbContext DbContext
@inject IHttpContextAccessor HttpContextAccessor
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1> Top 10 names decided by group: @groupName </h1>

        <button @onclick="ImportData" disabled="@isImporting">Import Data</button>

        @if (isImporting)
        {
            <p><em>Importing data...</em></p>
        }
        else if (importMessage != null)
        {
            <p>@importMessage</p>
        }

        <RadzenGrid Data="@names" TItem="NameViewModel" ColumnWidth="auto" Style="width:100%">
            <Columns>
                <RadzenGridColumn TItem="NameViewModel" Property="NameText" Title="Name" />
                <RadzenGridColumn TItem="NameViewModel" Property="AverageRating" Title="Average Rating" />
                @if (currentGroup != null)
                {
                    @foreach (var user in DbContext.Users.Where(u => u.GroupId == currentGroup.GroupId))
                    {
                        <RadzenGridColumn TItem="NameViewModel" Property=@($"UserRatings[{user.Id}]") Title=@($"{user.UserName}'s Rating") />
                    }
                }
            </Columns>
        </RadzenGrid>
    </Authorized>

    <NotAuthorized>
        <h3>User must log in</h3>
    </NotAuthorized>
</AuthorizeView>


@code {
    private bool isImporting = false;
    private string importMessage;
    private string groupName;
    private Models.Group? currentGroup;
    List<NameViewModel> names = new List<NameViewModel>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User.Identity.IsAuthenticated ? await UserManager.GetUserAsync(authState.User) : null;

        if (currentUser == null)
        {
            NavigationManager.NavigateTo("account/login", true);
        }
        else
        {
            currentGroup = await DbContext.Groups.FindAsync(currentUser.GroupId);
            groupName = currentGroup?.GroupName ?? "No group assigned";

            if (currentGroup != null)
            {
                var namesList = await DbContext.Names
      .Select(n => new NameViewModel
          {
              NameText = n.NameText,
              AverageRating = 0.0,  // Temporary placeholder
              UserRatings = new Dictionary<string, int>()  // Temporary placeholder
          })
      .ToListAsync();

                foreach (var nameViewModel in namesList)
                {
                    var ratings = await DbContext.Ratings
                        .Where(r => r.NameId == DbContext.Names.FirstOrDefault(n => n.NameText == nameViewModel.NameText).Id)
                        .ToListAsync();

                    nameViewModel.AverageRating = ratings.Any() ? ratings.Average(r => r.RatingValue) : 0.0;

                    var groupRatings = ratings
                        .Where(r => r.GroupId == currentGroup.GroupId)
                        .ToDictionary(r => r.UserId, r => r.RatingValue);

                    nameViewModel.UserRatings = groupRatings;
                }

                namesList = namesList.OrderByDescending(n => n.AverageRating).ToList();

            }
        }
    }

    private async Task ImportData()
    {
        isImporting = true;
        importMessage = null;

        try
        {
            await DataImportService.ImportCsvDataAsync();
            importMessage = "Data imported successfully!";
        }
        catch (Exception ex)
        {
            importMessage = $"An error occurred: {ex.Message}";
        }

        isImporting = false;
    }
}