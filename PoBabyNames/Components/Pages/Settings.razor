@page "/settings"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using PoBabyNames.Data
@using Radzen
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor

<AuthorizeView>
    <Authorized>
        <RadzenDropDown Data="@groups" TextProperty="GroupName" ValueProperty="GroupId" @bind-Value="selectedGroupId"
                        Style="width: 300px;" Placeholder="Select a group" />
        <RadzenTextBox @bind-Value="newGroupName" Style="width: 300px;" Placeholder="Or enter new group name" />
        <RadzenButton Text="Join/Change Group" Click="@SubmitGroup" />
    </Authorized>

    <NotAuthorized>
        <h3>User must log in</h3>
    </NotAuthorized>
</AuthorizeView>

@code {
    List<PoBabyNames.Models.Group> groups = new List<PoBabyNames.Models.Group>();
    int? selectedGroupId;
    string newGroupName;

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);

        if (currentUser == null)
        {
            NavigationManager.NavigateTo("account/login", true);
        }
        else
        {
            groups = await DbContext.Groups.ToListAsync();
            selectedGroupId = currentUser.GroupId; // Assuming GroupId is a property of the ApplicationUser
        }
    }

    private async Task SubmitGroup()
    {
        if (!string.IsNullOrEmpty(newGroupName))
        {
            var group = new PoBabyNames.Models.Group { GroupName = newGroupName };
            DbContext.Groups.Add(group);
            await DbContext.SaveChangesAsync();
            groups.Add(group); // Update the list to include the new group

            // Get the current user
            var currentUser = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);

            if (currentUser != null)
            {
                // Update the GroupId in the user table
                currentUser.GroupId = group.GroupId;
                await UserManager.UpdateAsync(currentUser);
            }

            NavigationManager.NavigateTo("/", forceLoad: true); // Redirect to home page
        }
        else if (selectedGroupId.HasValue)
        {
            var currentUser = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
            currentUser.GroupId = selectedGroupId.Value;
            await UserManager.UpdateAsync(currentUser);
            NavigationManager.NavigateTo("/", forceLoad: true); // Redirect to home page
        }
    }
}
